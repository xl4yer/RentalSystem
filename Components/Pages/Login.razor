<style>
    .custom-dialog-title {
        background-color: #4E3434;
        color: white;
    }
</style>

<EditForm Model="@user" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
        <TitleContent><MudText Typo="Typo.h6" Style="color:white">Login</MudText></TitleContent>
        <DialogContent>
            <p1>Username</p1>
            <MudTextField Clearable Required @bind-Value="user.UserName" For="@(() => user.UserName)" T="string" AutoFocus Variant="Variant.Outlined" Margin="Margin.Dense" />
            <p1>Password</p1>
            <MudTextField @bind-Value="@user.Password" For="@(() => user.Password)" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Click" AdornmentAriaLabel="Show Password" />
            <br />
            <MudText Align="Align.Center">Don't' Have Account? <u><b> <MudLink  @onclick="Register">Register</MudLink></b></u> </MudText>
            <br />
            <MudButton FullWidth Disabled="@_processing" @onclick="UserLogin" Variant="Variant.Filled" Style="background-color:#4E3434; color:white">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />

                    <MudText Class="ms-2">Signing in...</MudText>
                }
                else
                {
                    <MudText>Sign In</MudText>
                }
            </MudButton>
            <br />
            @if (loginError)
            {
                <div style="color: red; text-align: center;">Invalid Username or Password. Please try again.</div>
            }

        </DialogContent>
    </MudDialog>
</EditForm>


@code {
    [Parameter]
    public Users user { get; set; } = new Users();
    private bool _processing = false;
    private string username = "";
    private string password = "";
    private List<Users> users;
    private bool loginError = false; // To track login errors
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    private async Task UserLogin()
    {
        _processing = true;
        await Task.Delay(1000);
        loginError = false; // Reset error flag
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync($"api/User/UserLogin?username={user.UserName}&password={user.Password}");
            if (!response.IsSuccessStatusCode) throw new Exception("API call failed");
            var users = JsonConvert.DeserializeObject<List<Users>>(await response.Content.ReadAsStringAsync());
            if (users?.Count > 0)
            {
                var user = users[0];
                await Loc.SetItemAsStringAsync("token", user.Token);
                await Loc.SetItemAsStringAsync("role", user.Role);
                await Loc.SetItemAsStringAsync("name", user.UserName);
                Nav.NavigateTo("/counter");
            }
            else loginError = true;
            _processing = false;
        }
        catch (Exception ex)
        {
            loginError = true;
            Console.WriteLine($"Login error: {ex.Message}");
            _processing = false;
        }
    }

    void Click()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task Cancel()
    {

    }

    private  Task Register()
    {
        MudDialog.Close();
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        return Dialog.ShowAsync<Registration>("Register", options);
    }

    public void OnValidSubmit(EditContext context)
    {

    }
}