@page "/registration"
@rendermode InteractiveServer

@if (_loader == false)
{
    <div class="d-flex justify-content-center my-4">
        <div class="loader"></div>
    </div>
}
else
{
    <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="container mt-5">
            <div class="row">
                <div class="col-sm-3">
                </div>
                <div class="col-sm-3">
                    <p1>First Name</p1>
                    <MudTextField @bind-Value="user.Fname" T="string" For="@(() => user.Fname)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Middle Name</p1>
                    <MudTextField @bind-Value="user.Mname" T="string" For="@(() => user.Mname)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Last Name</p1>
                    <MudTextField @bind-Value="user.Lname" T="string" For="@(() => user.Lname)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Extension</p1>
                    <MudSelect @bind-Value="@user.Ext" For="@(() => user.Ext)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Sr.")" />
                        <MudSelectItem Value="@("Jr.")" />
                        <MudSelectItem Value="@("II")" />
                        <MudSelectItem Value="@("III")" />
                        <MudSelectItem Value="@("IV")" />
                        <MudSelectItem Value="@("V")" />
                    </MudSelect>
                    <p1>Address</p1>
                    <MudTextField @bind-Value="user.Address" For="@(() => user.Address)" Lines="3" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </div>
                <div class="col-sm-3">
                    <p1>Contact Number</p1>
                    <MudTextField @bind-Value="user.Contact" T="string" For="@(() => user.Contact)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Email</p1>
                    <MudTextField @bind-Value="user.Email" T="string" For="@(() => user.Email)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Username</p1>
                    <MudTextField @bind-Value="user.UserName" T="string" For="@(() => user.UserName)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <p1>Password</p1>
                    <MudTextField @bind-Value="@user.Password" For="@(() => user.Password)" Margin="Margin.Dense" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Click" AdornmentAriaLabel="Show Password" />
                    <br /><br /><br />
                    <MudButtonGroup FullWidth>
                        <MudButton FullWidth>Back to Home</MudButton>
                        <MudButton Disabled="@_processing" @onclick="Register" FullWidth Variant="Variant.Filled" Style="background-color:#4E3434; color:white">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />

                                <MudText Class="ms-2">Please Wait...</MudText>
                            }
                            else
                            {
                                <MudText>Register</MudText>
                            }
                        </MudButton>
                    </MudButtonGroup>
                </div>
                <div class="col-sm-3">
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public Users user { get; set; } = new Users();
    private bool _processing = false;
    private bool _loader = false;
    public string randomNumbers = "";
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string message { get; set; } = "";

    private async Task GenerateRandomNumbers()
    {
        Random random = new Random();
        int randomNumber = random.Next(1000, 10000);

        randomNumbers = $"{randomNumber}";
    }

    public void OnValidSubmit(EditContext context)
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(1000);
        _loader = true;
        StateHasChanged();
    }

    void Click()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task SendEmail()
    {
        try
        {
            var httpClient = new HttpClient();
            var content = new FormUrlEncodedContent(new[]
            {
            new KeyValuePair<string, string>("toAddress", $"{user.Email}"),
            new KeyValuePair<string, string>("subject", "Activation Code"),
            new KeyValuePair<string, string>("body", $"{randomNumbers}")
        });

            var response = await httpClient.PostAsync($"{Nav.BaseUri}SendEmail", content);

            if (response.IsSuccessStatusCode)
            {
                message = "Message Sent";
            }
            else
            {
                message = "Failed to send message";
            }
        }
        catch (Exception ex)
        {
            message = $"{ex.Message}";
        }
    }


    private async Task Register()
    {
        _processing = true;
        await GenerateRandomNumbers();
        await Loc.SetItemAsStringAsync("randomNumbers", randomNumbers);
        await Loc.SetItemAsStringAsync("Id", Guid.NewGuid().ToString());
        await Loc.SetItemAsStringAsync("Fname", user.Fname);
        await Loc.SetItemAsStringAsync("Mname", user.Mname);
        await Loc.SetItemAsStringAsync("Lname", user.Lname);
        await Loc.SetItemAsStringAsync("Ext", user.Ext);
        await Loc.SetItemAsStringAsync("Address", user.Address);
        await Loc.SetItemAsStringAsync("Contact", user.Contact);
        await Loc.SetItemAsStringAsync("UserName", user.UserName);
        await Loc.SetItemAsStringAsync("Password", user.Password);
        await Loc.SetItemAsStringAsync("Email", user.Email);
        await SendEmail();
        await Task.Delay(2000);
        _processing = false;
        Nav.NavigateTo("/counter");

        // _processing = true;
        // try
        // {
        //     var _user = new Users
        //         {
        //             Id = Guid.NewGuid().ToString(),
        //             Fname = user.Fname,
        //             Mname = user.Mname,
        //             Lname = user.Lname,
        //             Ext = user.Ext,
        //             Address = user.Address,
        //             Contact = user.Contact,
        //             Role = "User",
        //             UserName = user.UserName,
        //             Password = user.Password,
        //             Email = user.Email
        //         };

        //     var response = await new HttpClient { BaseAddress = new Uri(Nav.BaseUri) }
        //         .PostAsJsonAsync("api/User/Register", _user);

        //     var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
        //     var isSuccess = response.IsSuccessStatusCode && result > 0;
        //     SnackBar.Add(
        //         isSuccess ? "Done: Successfully Registered!" : $"Warning: {response.ReasonPhrase}",
        //         isSuccess ? Severity.Success : Severity.Warning
        //     );
        // }
        // catch (Exception ex)
        // {
        //     SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        // }
    }

}
