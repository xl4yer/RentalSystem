@page "/dashboard"
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<MudLayout>
    <!-- Top App Bar -->
    <MudAppBar Elevation="1" Style="background-color:#4E3434">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <LoginButton />
    </MudAppBar>

    <!-- Side Drawer -->
    <MudDrawer @bind-Open="@_open" Breakpoint="@_breakpoint" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudImage Src="logo1.png" Style="height:150px; width:150px; margin-top:0; display:block; margin-left:auto; margin-right:auto; border-radius:10px;" />
        <br />
        <MudNavMenu>
            <MudNavLink Href="dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
            <MudNavLink Href="gowns" Icon="@Icons.Material.Filled.Checkroom">Gowns</MudNavLink>
            <MudNavLink Href="reservations" Icon="@Icons.Material.Filled.CalendarToday">Reservations</MudNavLink>
            <MudNavLink Href="rentals" Icon="@Icons.Material.Filled.ShoppingCart">Rentals</MudNavLink>
            <MudNavLink Href="customers" Icon="@Icons.Material.Filled.People">Customers</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <!-- Main Content -->
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-5">

            <div class="row g-3">
                <!-- g-3 adds gutter spacing -->
                <div class="col-12 col-md-6">
                    <MudCard Class="dashboard-card h-100" Style="background:linear-gradient(to right, #f7e1d7, #e8cbc0); border-radius:20px;">
                        <MudCardContent>
                            <MudText Align="Align.Center" Class="dashboard-title" Size="5">Daily Income</MudText>
                            <MudText Align="Align.Center" Style="font-size:30px; font-weight:bold">₱@dailyIncome</MudText>
                        </MudCardContent>
                    </MudCard>
                </div>

                <div class="col-12 col-md-6">
                    <MudCard Class="dashboard-card h-100" Style="background:linear-gradient(to right, #f7e1d7, #e8cbc0); border-radius:20px;">
                        <MudCardContent>
                            <MudText Align="Align.Center" Class="dashboard-title" Size="5">Monthly Income</MudText>
                            <MudText Align="Align.Center" Style="font-size:30px; font-weight:bold">₱@monthlyIncome</MudText>
                        </MudCardContent>
                    </MudCard>
                </div>
            </div>


    <br />
            <MudGrid GutterSize="24px">
                @foreach (var card in DashboardCards)
                {
                    <MudItem xs="12" sm="6" md="3">
                        <MudPaper Elevation="6" Class="pa-5 rounded-xl hover:scale-105 transition-all duration-300" Style="background:linear-gradient(to right, #f7e1d7, #e8cbc0);">
                            <MudGrid AlignItems="Center">
                                <MudItem xs="4">
                                    <MudIcon Icon="@card.Icon" Color="@card.Color" Style="font-size:3.5rem;" />
                                </MudItem>
                                <MudItem xs="8">
                                    <MudText Typo="Typo.h5" Class="font-bold">@card.Value</MudText>
                                    <MudText Typo="Typo.subtitle2">@card.Label</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
            <br />

        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _open = true;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private int availableGowns;
    private int pendingGowns;
    private int rentedGowns;
    private int returnedGowns;
    private double dailyIncome;
    private double monthlyIncome;

    private void ToggleDrawer() => _open = !_open;

    public async Task DailyIncome()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Rental/DailyIncome");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                dailyIncome = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }

    public async Task MonthlyIncome()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Rental/MonthlyIncome");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                monthlyIncome = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await MonthlyIncome();
        await DailyIncome();
        await CountAvailableGowns();
        await CountPendingGowns();
        await CountRentedGowns();
        await CountReturnedGowns();
    }

    private async Task CountGowns(string endpoint, Action<int> setter)
    {
        using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
        var response = await client.GetAsync($"api/Gown/{endpoint}");
        if (response.IsSuccessStatusCode)
        {
            var count = JsonConvert.DeserializeObject<int>(await response.Content.ReadAsStringAsync());
            setter(count);
            StateHasChanged();
        }
    }

    public Task CountAvailableGowns() => CountGowns("CountAvailableGowns", val => availableGowns = val);
    public Task CountPendingGowns() => CountGowns("CountPendingGowns", val => pendingGowns = val);
    public Task CountRentedGowns() => CountGowns("CountRentedGowns", val => rentedGowns = val);
    public Task CountReturnedGowns() => CountGowns("CountReturnedGowns", val => returnedGowns = val);

    public class DashboardCard
    {
        public string Icon { get; set; }
        public Color Color { get; set; }
        public string Value { get; set; }
        public string Label { get; set; }
    }

    private List<DashboardCard> DashboardCards => new()
    {
        new() { Icon = Icons.Material.Outlined.EventAvailable, Color = Color.Success, Value = availableGowns.ToString(), Label = "Available Gowns" },
        new() { Icon = Icons.Material.Outlined.Pending, Color = Color.Warning, Value = pendingGowns.ToString(), Label = "Pending Gowns" },
        new() { Icon = Icons.Material.Outlined.ShoppingCart, Color = Color.Primary, Value = rentedGowns.ToString(), Label = "Rented Gowns" },
        new() { Icon = Icons.Material.Outlined.AssignmentReturn, Color = Color.Tertiary, Value = returnedGowns.ToString(), Label = "Returned Gowns" },
    };
}
