
<style>
    .custom-dialog-title {
    background-color: #4E3434;
    color: white;
    }
</style>

<EditForm Model="@_gowns" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
        <TitleContent><MudText Typo="Typo.h6" Style="color:white">Update</MudText></TitleContent>
        <DialogContent>
            <MudContainer Style="max-height: 650px;">
                <MudFileUpload Class="photo" T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.jpeg">
                    <ActivatorContent>
                        <img src="@imgsrc" width="200" height="200" style="border: 1px solid gray; margin-top: 10px; border-radius: 5px;" />
                    </ActivatorContent>
                </MudFileUpload>
                <br />
                <MudText Align="Align.Left">Gown Name</MudText>
                <MudTextField @bind-Value="@_gowns.Name" For="@(() => _gowns.Name)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudText Align="Align.Left">Gown Type</MudText>
                <MudSelect @bind-Value="@_gowns.Type" For="@(() => _gowns.Type)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                    @foreach (var type in new[] { "Bridal", "Debut", "Filipininia", "Prom", "Prenup & Photoshoots", "Sponsors", "Maternity" })
                    {
                        <MudSelectItem Value="@type" />
                    }
                </MudSelect>
                <MudText Align="Align.Left">Gown Color</MudText>
                <MudSelect @bind-Value="@_gowns.Color" For="@(() => _gowns.Color)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                    @foreach (var color in new[] { "Black", "Blue", "Brown", "Cream", "Gold", "Gray and Silver", "Green", "Orange", "Pink", "Nude and Skintone", "Red", "Teal", "Violet and Purple", "White", "Yellow" })
                    {
                        <MudSelectItem Value="@color" />
                    }
                </MudSelect>
                <MudText Align="Align.Left">Gown Size</MudText>
                <MudSelect @bind-Value="@_gowns.Size" For="@(() => _gowns.Size)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                    @foreach (var size in new[] { "Kids", "XS", "S", "M", "L", "XL", "XXL" })
                    {
                        <MudSelectItem Value="@size" />
                    }
                </MudSelect>
                <MudText Align="Align.Left">Rental Fee</MudText>
                <MudNumericField @bind-Value="@_gowns.Fee" For="@(() => _gowns.Fee)" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <MudText Align="Align.Left">Status</MudText>
                <MudSelect @bind-Value="@_gowns.Status" For="@(() => _gowns.Status)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                    @foreach (var status in new[] { "Available", "Reserved", "Rented"})
                    {
                        <MudSelectItem Value="@status" />
                    }
                </MudSelect>
            </MudContainer> <br />
            <MudToolBar>
                <MudSpacer />
                <MudButton FullWidth @onclick="Cancel">Cancel</MudButton>
                <MudButton FullWidth Variant="Variant.Filled" @onclick="Submit" Style="background-color:#4E3434; color:white">Update</MudButton>
            </MudToolBar>
        </DialogContent>

    </MudDialog>
</EditForm>

@code {
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    public Image _image { get; set; } = new Image();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    public string imgsrc { get; set; } = "";
    [Parameter] public byte[] _filebytes { get; set; } = null;
    [Parameter] public byte[] _photo { get; set; } = null;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    public void OnValidSubmit(EditContext context)
    {

    }

    void Cancel()
    {
        MudDialog.Close();
    }

    private async  Task Submit()
    {
        try
        {
            var gown = new Gowns
                {
                    Id = _gowns.Id,
                    Photo = _photo ?? _gowns.Photo,
                    Name = _gowns.Name,
                    Type = _gowns.Type,
                    Color = _gowns.Color,
                    Size = _gowns.Size,
                    Fee = _gowns.Fee,
                    Status = _gowns.Status
                };
            var response = await new HttpClient { BaseAddress = new Uri(Nav.BaseUri) }
                .PutAsJsonAsync("api/Gown/UpdateGown", gown);
            var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
            var isSuccess = response.IsSuccessStatusCode && result > 0;
            SnackBar.Add(
                isSuccess ? "Done: Successfully Updated!" : $"Warning: {response.ReasonPhrase}",
                isSuccess ? Severity.Success : Severity.Warning
            );
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        if (_gowns.Photo != null && _gowns.Photo.Length > 0)
        {
            imgsrc = $"data:image/png;base64,{Convert.ToBase64String(_gowns.Photo)}";
        }
    }

    private async void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
        _filebytes = memoryStream.ToArray();
        _photo = GetImage(Convert.ToBase64String(_filebytes));
        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(_photo));
        StateHasChanged();
    }


    private async Task clearImg()
    {
        var photos = GetImage(_image.img64);

        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photos));
        StateHasChanged();

    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;

    }

}

           