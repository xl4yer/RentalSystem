<style>
    .custom-dialog-title {
    background-color: #4E3434;
    color: white;
    text-align: center;
    }

</style>

<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">Reservation Details</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 650px; padding: 20px;">
            <center>
                <MudImage Style="height:200px; width:150px" Src="@( $"data:image/bmp;base64,{Convert.ToBase64String(_reservation.Photo)}" )"
                Class="reservation-image" />
            </center>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Customer Name: <u>@_reservation.Fullname</u></MudText>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Gown Name: <u>@_reservation.Name</u></MudText>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Gown Type: <u>@_reservation.Type</u></MudText>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Color: <u>@_reservation.Color</u></MudText>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Size: <u>@_reservation.Size</u></MudText>
            <MudText Typo="Typo.subtitle1">Remaining Payment</MudText>
            <MudNumericField Margin="Margin.Dense" @bind-Value="remainingFee" ReadOnly  Variant="Variant.Outlined" />
            <MudText Typo="Typo.subtitle1" >Select Due Date</MudText>
            <MudDatePicker Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Date="_date" />
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton FullWidth Variant="Variant.Filled" @onclick="Submit" Style="background-color:#4E3434; color:white;">Submit</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter] public Reservation _reservation { get; set; } = new Reservation();
    [Parameter] public Rentals _rentals { get; set; } = new Rentals();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private DateTime? _date { get; set; } = DateTime.Now.AddDays(1);
    double remainingFee { get; set; }

    protected async override Task OnInitializedAsync()
    {
        remainingFee = _reservation.Fee - _reservation.ReservationFee;
    }

    private async Task Submit()
    {
        try
        {
            var rentals = new Rentals
                {
                    Id = Guid.NewGuid().ToString(),
                    GownId = _reservation.GownId,
                    UserId = _reservation.UserId,
                    Date = DateTime.Now,
                    DueDate = _date,
                    RentalFee = remainingFee,
                    Status = "OnGoing",
                    Penalty = 0
                };

            var httpClient = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var rentalResponse = await httpClient.PostAsJsonAsync("api/Rental/AddRental", rentals);
            var rentalResult = await rentalResponse.Content.ReadFromJsonAsync<int?>() ?? 0;

            var isRentalSuccess = rentalResponse.IsSuccessStatusCode && rentalResult > 0;

            if (isRentalSuccess)
            {
                // Proceed to update reservation status
                var updatedReservation = new Reservation
                    {
                        Id = _reservation.Id,
                        Status = "Rented"
                    };

                var reservationResponse = await httpClient.PutAsJsonAsync("api/Reservation/ApproveReservation", updatedReservation);
                var reservationResult = await reservationResponse.Content.ReadFromJsonAsync<int?>() ?? 0;

                var isReservationSuccess = reservationResponse.IsSuccessStatusCode && reservationResult > 0;

                SnackBar.Add(
                    isReservationSuccess ? "Done: Rental submitted!" : "Warning: Rental added but reservation update failed.",
                    isReservationSuccess ? Severity.Success : Severity.Warning
                );
            }
            else
            {
                SnackBar.Add($"Warning: Rental submission failed. {rentalResponse.ReasonPhrase}", Severity.Warning);
            }

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task Cancel()
    {
        MudDialog.Close();
    }
}
