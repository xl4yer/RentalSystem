<style>
    .custom-dialog-title {
    background-color: #4E3434;
    color: white;
    }
</style>


<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent><MudText Typo="Typo.h6" Style="color:white">Returned Item</MudText></TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 650px;">
        </MudContainer> 
        <MudToolBar>
            <MudSpacer />
            <MudButton FullWidth @onclick="Cancel">Cancel</MudButton>
            <MudButton FullWidth Variant="Variant.Filled" @onclick="Confirm" Style="background-color:#4E3434; color:white">Confirm</MudButton>
        </MudToolBar>
    </DialogContent>

</MudDialog>

@code{
    [Parameter] public Rentals _rentals { get; set; } = new Rentals();
    [Parameter] public Reservation _reservation { get; set; } = new Reservation();
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    void Cancel()
    {
        MudDialog.Cancel();
    }


    private async Task Confirm()
    {
        try
        {
            using var httpClient = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };

            var rentalUpdate = new Rentals
                {
                    Id = _rentals.Id,
                    GownId = _rentals.GownId,
                    UserId = _rentals.UserId,
                    Date = _rentals.Date,
                    DueDate = _rentals.DueDate,
                    RentalFee = _rentals.RentalFee,
                    Status = "Returned"
                };

            var rentalResponse = await httpClient.PutAsJsonAsync("api/Rental/Returned", rentalUpdate);
            int rentalResult = await rentalResponse.Content.ReadFromJsonAsync<int?>() ?? 0;

            if (rentalResponse.IsSuccessStatusCode && rentalResult > 0)
            {
                SnackBar.Add("Done: Successfully Returned!", Severity.Success);
            }
            else
            {
                SnackBar.Add($"Warning: Rental update failed. {rentalResponse.ReasonPhrase}", Severity.Warning);
            }

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


}
    
