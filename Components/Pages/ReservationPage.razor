@page "/reservations"
@rendermode InteractiveServer

<PageTitle>Reservations</PageTitle>

<MudLayout>
    <MudAppBar Elevation="1" Style="background-color:#4E3434">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <LoginButton />
    </MudAppBar>
    <MudDrawer @bind-Open="@_open" Breakpoint="@_breakpoint" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudAvatar style="width:120px; height:120px">
                <MudImage Src="logo1.png"></MudImage>
            </MudAvatar>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
            <MudNavLink Href="gowns" Icon="@Icons.Material.Filled.Checkroom">Gowns</MudNavLink>
            <MudNavLink Href="reservations" Icon="@Icons.Material.Filled.CalendarToday">Reservations</MudNavLink>
            <MudNavLink Href="rentals" Icon="@Icons.Material.Filled.ShoppingCart">Rentals</MudNavLink>
            <MudNavLink Href="users" Icon="@Icons.Material.Filled.VerifiedUser">Users</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            <div class="container mt-3">
                @if (reservation == null)
                {
                    <div class="d-flex justify-content-center my-4">
                        <div class="loader"></div>
                    </div>
                }
                else if (reservation.Length == 0)
                {
                    <MudTable Dense Hover Items="@reservation" Elevation="1" Style="border-radius:20px"
                              HorizontalScrollbar FixedHeader FixedFooter Height="600px">
                        <ToolBarContent>
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Outlined" @onclick="LoadReservations">Refresh</MudButton>
                            <MudSpacer />
                            <MudTextField @bind-Value="txtsearch" Clearable Placeholder="Search customer's name" Variant="Variant.Outlined" Margin="Margin.Dense" /> &nbsp;
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Filled" @onclick="Search">Search</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            @foreach (var header in new[] { "Date", "Photo", "Customer Name", "Gown Name", "Size", "Color", "Pickup Date", "Status", "Action" })
                            {
                                <MudTh>@header</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                          
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudTable Dense Hover Items="@reservation" Elevation="1" Style="border-radius:20px"
                    HorizontalScrollbar FixedHeader FixedFooter Height="600px">
                        <ToolBarContent>
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Outlined" @onclick="LoadReservations">Refresh</MudButton>
                            <MudSpacer />
                            <MudTextField @bind-Value="txtsearch" Clearable Placeholder="Search customer's name" Variant="Variant.Outlined" Margin="Margin.Dense" /> &nbsp;
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Filled" @onclick="Search">Search</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            @foreach (var header in new[] { "Date", "Photo", "Customer Name", "Gown Name", "Size", "Color", "Pickup Date", "Status", "Action" })
                            {
                                <MudTh>@header</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Date?.ToString("d")</MudTd>
                            <MudTd>
                                <img src="data:image/bmp;base64,@Convert.ToBase64String(context.Photo)" class="img-thumbnail rounded" style="max-width: 70px;" />
                            </MudTd>
                            <MudTd>@context.Fullname</MudTd>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.Size</MudTd>
                            <MudTd>@context.Color</MudTd>
                            <MudTd>@context.PickupDate?.ToString("d")</MudTd>
                            <MudTd> <MudChip T="string" Color="@(context.Status == "Approved" ? Color.Success : context.Status == "Declined" ? Color.Secondary : context.Status == "Pending" ? Color.Warning : context.Status == "Rented" ? Color.Info :  Color.Primary)">@context.Status</MudChip></MudTd>
                            @if (context.Status == "Approved")
                            {
                                <MudTd>
                                    <MudButton Variant="Variant.Filled" Style="font-size:10px" @onclick="() => AddToRentals(context.Id)" Color="Color.Secondary">Add To Rentals</MudButton>
                                </MudTd>
                            }
                            else if (context.Status == "Rented")
                            {
                                <MudTd>
                                    <MudButton Variant="Variant.Filled" Style="font-size:10px" Color="Color.Secondary" @onclick="() => Print(context.Id)">Print Receipt</MudButton>
                                </MudTd>
                            }
                            else if (context.Status == "Returned")
                            {
                                <MudTd><h1>-</h1></MudTd>
                            }
                            else
                            {
                                <MudTd>
                                    <MudButton Variant="Variant.Filled" @onclick="() => Actions(context.Id)" Style="font-size:10px" Color="Color.Secondary">Approve/Decline</MudButton>
                                </MudTd>
                            }

                        </RowTemplate>
                    </MudTable>
                }
            </div>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _open = true;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private string txtsearch = string.Empty;

      protected HubConnection hubConnection;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/hub"))
            .Build();

        hubConnection.On("client", async () =>
        {
            await LoadReservations();
        });

        await hubConnection.StartAsync();
    }

    public async Task Search()
    {
        if (string.IsNullOrWhiteSpace(txtsearch))
        {
            SnackBar.Add("Please enter a search term.", Severity.Warning);
            return;
        }

        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri(Nav.BaseUri);
                var token = await Loc.GetItemAsStringAsync("token");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                string searchQuery = Uri.EscapeDataString(txtsearch);
                HttpResponseMessage response = await client.GetAsync($"api/Reservation/SearchReservation?search={searchQuery}");

                if (response.IsSuccessStatusCode)
                {
                    string contentResponse = await response.Content.ReadAsStringAsync();
                    reservation = JsonConvert.DeserializeObject<Reservation[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    SnackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }
    private Reservation[]? reservation;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadReservations();
    }

    private async Task Print(string id)
    {
        var parameters = new DialogParameters
    {
        { "Id", id }
    };

        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        Dialog.Show<Print>("Print Receipt", parameters, options);
    }

    public async Task LoadReservations()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendClient");
        }

        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Reservation/Reservations");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(1000);
            reservation = JsonConvert.DeserializeObject<Reservation[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task Actions(string id)
    {
        var parameters = new DialogParameters();
        var update = reservation.FirstOrDefault(_ => _.Id == id);
        parameters.Add("_reservation", update);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await Dialog.Show<ReservationActions>("", parameters, options).Result;
    }

    private async Task AddToRentals(string id)
    {
        var parameters = new DialogParameters();
        var update = reservation.FirstOrDefault(_ => _.Id == id);
        parameters.Add("_reservation", update);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await Dialog.Show<AddToRentals>("", parameters, options).Result;
    }
}
