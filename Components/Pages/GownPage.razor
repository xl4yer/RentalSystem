@page "/gowns"
@rendermode InteractiveServer
<PageTitle>Rental Gowns</PageTitle>


<div class="container mt-5">
    @if (gown == null || gown.Length == 0)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <NewNavMenu/>

        <MudGrid Class="mt-3" Justify="Justify.Center">
            <MudItem xs="12" sm="4">
                <EditForm Model="@_gowns" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudContainer Style="max-height: 600px;">
                        <MudFileUpload Class="photo" T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.jpeg">
                            <ActivatorContent>
                                <img src="@imgsrc" class="img-fluid img-thumbnail rounded mt-2" style="max-width: 200px;" />
                            </ActivatorContent>
                        </MudFileUpload>

                        <MudText Align="Align.Left">Gown Name</MudText>
                        <MudTextField @bind-Value="@_gowns.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />

                        <MudText Align="Align.Left">Gown Type</MudText>
                        <MudSelect @bind-Value="@_gowns.Type" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            @foreach (var type in new[] { "Bridal", "Debut", "Filipininia", "Prom", "Prenup & Photoshoots", "Sponsors", "Maternity" })
                            {
                                <MudSelectItem Value="@type" />
                            }
                        </MudSelect>

                        <MudText Align="Align.Left">Gown Color</MudText>
                        <MudSelect @bind-Value="@_gowns.Color" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            @foreach (var color in new[] { "Black", "Blue", "Brown", "Cream", "Gold", "Gray and Silver", "Green", "Orange", "Pink", "Nude and Skintone", "Red", "Teal", "Violet and Purple", "White", "Yellow" })
                            {
                                <MudSelectItem Value="@color" />
                            }
                        </MudSelect>

                        <MudText Align="Align.Left">Gown Size</MudText>
                        <MudSelect @bind-Value="@_gowns.Size" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            @foreach (var size in new[] { "Kids", "XS", "S", "M", "L", "XL", "XXL" })
                            {
                                <MudSelectItem Value="@size" />
                            }
                        </MudSelect>

                        <MudText Align="Align.Left">Rental Fee</MudText>
                        <MudNumericField @bind-Value="@_gowns.Fee" Variant="Variant.Outlined" Margin="Margin.Dense" />

                    </MudContainer>

                    <MudToolBar>
                        <MudSpacer />
                        <MudButton FullWidth>Clear</MudButton>
                        <MudButton FullWidth Variant="Variant.Filled" @onclick="Submit" Style="background-color:#4E3434; color:white">Submit</MudButton>
                    </MudToolBar>
                </EditForm>
            </MudItem>
            <MudItem xs="12" sm="8">
                <MudToolBar Class="top-row px-3">
                    <MudSpacer />
                    <MudTextField T="string"
                    Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    AdornmentColor="Color.Primary"
                    Placeholder="Search Gowns..."
                    Variant="Variant.Outlined"
                    Margin="Margin.Dense" />
                </MudToolBar>

                <MudTable Class="ma-3" Dense Hover Items="@gown"
                HorizontalScrollbar FixedHeader FixedFooter Height="600px">
                    <HeaderContent>
                        @foreach (var header in new[] { "Photo", "Gown Name", "Type", "Color", "Size", "Rental Fee", "Action" })
                        {
                            <MudTh>@header</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <img src="data:image/bmp;base64,@Convert.ToBase64String(context.Photo)"
                            class="img-thumbnail rounded"
                            style="max-width: 100px;" />
                        </MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Type</MudTd>
                        <MudTd>@context.Color</MudTd>
                        <MudTd>@context.Size</MudTd>
                        <MudTd>@context.Fee</MudTd>
                        <MudTd>
                            <MudFab Style="background-color:#4E3434; color:white"
                            @onclick="() => Update(context.Id)"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>

@code {
    private Gowns[]? gown;
    private Reservation[]? reservation;
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    [Parameter] public Image _image { get; set; } = new Image();
    bool fixed_header = true;
    bool fixed_footer = false;
    public string imgsrc { get; set; } = "";
    [Parameter]
    public byte[] _filebytes { get; set; } = null;
    [Parameter]
    public byte[] _photo { get; set; } = null;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    public Position Position { get; set; } = Position.Left;

    private async Task Submit()
    {
        try
        {
            var gown = new Gowns
                {
                    Id = Guid.NewGuid().ToString(),
                    Photo = _photo,
                    Name = _gowns.Name,
                    Type = _gowns.Type,
                    Color = _gowns.Color,
                    Size = _gowns.Size,
                    Fee = _gowns.Fee
                };
            var response = await new HttpClient { BaseAddress = new Uri(Nav.BaseUri) }
                .PostAsJsonAsync("api/Gown/AddGown", gown);
            var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
            var isSuccess = response.IsSuccessStatusCode && result > 0;
            SnackBar.Add(
                isSuccess ? "Done: Successfully Saved!" : $"Warning: {response.ReasonPhrase}",
                isSuccess ? Severity.Success : Severity.Warning
            );
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        if (_image.img64 != null && _image.img64.Length > 0)
        {
            imgsrc = string.Format($"data:image/png;base64,{_image.img64}");
        }
    }

    private async void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
        _filebytes = memoryStream.ToArray();
        _photo = GetImage(Convert.ToBase64String(_filebytes));
        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(_photo));
        StateHasChanged();
    }

    private async Task clearImg()
    {
        var photos = GetImage(_image.img64);

        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photos));
        StateHasChanged();

    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadGown();
        await LoadReservation();
    }

    private async Task Update(string id)
    {
        var parameters = new DialogParameters();
        var update = gown.FirstOrDefault(_ => _.Id == id);
        parameters.Add("_gowns", update);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small, 
                FullWidth = true
            };

        var dialog = await Dialog.Show<Update>("Update", parameters, options).Result;

    }

    private async Task LoadGown()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Gown/Gowns");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(1000);
            gown = JsonConvert.DeserializeObject<Gowns[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadReservation()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Reservation/Reservations");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(1000);
            reservation = JsonConvert.DeserializeObject<Reservation[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    public void OnValidSubmit(EditContext context)
    {

    }
}
