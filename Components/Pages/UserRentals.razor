@page "/userrentals"
@inject HttpClient Http
@inject NavigationManager Nav
@inject ILocalStorageService Loc

<style>
    .custom-dialog-title {
        background-color: #4E3434;
        color: white;
    }
</style>


<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">My Rentals</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 650px;">

            <MudTable Class="ma-3" Dense Hover Items="@rentals" FixedHeader FixedFooter Height="600px">
                <HeaderContent>
                    @foreach (var header in new[] { "Photo", "Gown Name", "Type", "Color", "Size", "Status" })
                    {
                        <MudTh>@header</MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <img src="data:image/bmp;base64,@Convert.ToBase64String(context.Photo)" class="img-thumbnail rounded" style="max-width: 70px;" />
                    </MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.Type</MudTd>
                    <MudTd>@context.Color</MudTd>
                    <MudTd>@context.Size</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@(context.Status == "OnGoing" ? Color.Success : Color.Tertiary)">
                            @context.Status
                        </MudChip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private Rentals? _rentals;
    private Rentals[]? rentals;
    private string UserId { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) UserId = await Loc.GetItemAsStringAsync("Id");
        await LoadUserReservations();
        StateHasChanged();
    }

    private async Task LoadUserReservations()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync($"api/Rental/UserRentals?UserId={UserId}");
            if (!response.IsSuccessStatusCode) return;
            rentals = JsonConvert.DeserializeObject<Rentals[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

}
