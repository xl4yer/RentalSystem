@page "/rentals"
@rendermode InteractiveServer

<PageTitle>Rentals</PageTitle>

<MudLayout>
    <MudAppBar Elevation="1" Style="background-color:#4E3434">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <LoginButton />
    </MudAppBar>
    <MudDrawer @bind-Open="@_open" Breakpoint="@_breakpoint" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">V.O.W</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="dashboard">Dashboard</MudNavLink>
            <MudNavLink Href="reservations">Reservations</MudNavLink>
            <MudNavLink Href="rentals">Rentals</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            <div class="container mt-3">
                @if (rentals == null)
                {
                    <div class="d-flex justify-content-center my-4">
                        <div class="loader"></div>
                    </div>
                }
                else if (rentals.Length == 0)
                {
                    <div class="text-center my-4 d-flex justify-content-center">
                        <h1>No records found</h1>
                    </div>
                }
                else
                {
                    <MudTable Dense Hover Items="@rentals" Elevation="1" Style="border-radius:20px"
                    HorizontalScrollbar FixedHeader FixedFooter Height="600px">
                        <ToolBarContent>
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Outlined" @onclick="LoadRentals">Refresh</MudButton>
                            <MudSpacer />
                            <MudTextField @bind-Value="txtsearch" Clearable Placeholder="Search Rentals..." Variant="Variant.Outlined" Margin="Margin.Dense" /> &nbsp;
                            <MudButton Style="background-color:#4E3434; color:white" Variant="Variant.Filled" @onclick="Search">Search</MudButton>
                        </ToolBarContent>

                        <HeaderContent>
                            @foreach (var header in new[] { "Date", "Photo", "Customer Name", "Gown Name", "Due Date", "Status", "Action" })
                            {
                                <MudTh>@header</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Date?.ToString("d")</MudTd>
                            <MudTd>
                                <img src="data:image/bmp;base64,@Convert.ToBase64String(context.Photo)" class="img-thumbnail rounded" style="max-width: 70px;" />
                            </MudTd>
                            <MudTd>@context.Fullname</MudTd>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.DueDate?.ToString("d")</MudTd>
                            <MudTd> 
                                <MudChip T="string" Color="@(context.Status == "OnGoing" ? Color.Success : context.Status == "Returned" ? Color.Tertiary : Color.Info)">@context.Status</MudChip></MudTd>
                            <MudTd>
                                @if(context.Status == "Returned")
                                {
                                    <h1>-</h1>
                                }
                                else
                                {
                                    <MudButton onclick="() => Actions(context.Id)" Variant="Variant.Filled" Style="font-size:10px" Color="Color.Secondary">Mark As Returned</MudButton>
                                }
                              
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </div>

        </MudContainer>
    </MudMainContent>
</MudLayout>



@code {
    private bool _open = true;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private string txtsearch = string.Empty;

    public async Task Search()
    {
        if (string.IsNullOrWhiteSpace(txtsearch))
        {
            SnackBar.Add("Please enter a search term.", Severity.Warning);
            return;
        }

        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri(Nav.BaseUri);
                var token = await Loc.GetItemAsStringAsync("token");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                string searchQuery = Uri.EscapeDataString(txtsearch);
                HttpResponseMessage response = await client.GetAsync($"api/Rental/SearchRentals?search={searchQuery}");

                if (response.IsSuccessStatusCode)
                {
                    string contentResponse = await response.Content.ReadAsStringAsync();
                    rentals = JsonConvert.DeserializeObject<Rentals[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    SnackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    private void ToggleDrawer()
    {
        _open = !_open;
    }
    private Rentals[]? rentals;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadRentals();
    }
    private async Task LoadRentals()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Rental/Rentals");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(1000);
            rentals = JsonConvert.DeserializeObject<Rentals[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task Actions(string id)
    {
        var parameters = new DialogParameters();
        var update = rentals.FirstOrDefault(_ => _.Id == id);
        parameters.Add("_rentals", update);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await Dialog.Show<RentalActions>("", parameters, options).Result;
    }

    public async Task AddRental()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };
        var dialog = await Dialog.Show<AddToRentals>("", parameters, options).Result;
    }
}
