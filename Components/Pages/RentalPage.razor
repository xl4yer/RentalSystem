@page "/rentals"
@rendermode InteractiveServer
<br />
 <MudText Typo="Typo.h5" Align="Align.Center">Rentals</MudText>
<MudTable Class="ma-3" Dense Hover Items="@rentals"
          HorizontalScrollbar FixedHeader FixedFooter Height="600px">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" Placeholder="Search Rentals..." Variant="Variant.Outlined" Margin="Margin.Dense" />
    </ToolBarContent>

    <HeaderContent>
        @foreach (var header in new[] { "Date", "Customer Name","Gown Name","Status", "Action" })
        {
            <MudTh Style="background-color: #4E3434; color: white;">@header</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Date?.ToString("d")</MudTd>
        <MudTd>@context.Fullname</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd> <MudChip T="string" Color="@(context.Status == "OnGoing" ? Color.Success : context.Status == "Returned" ? Color.Warning : Color.Info)">@context.Status</MudChip></MudTd>
        <MudTd>
            <MudFab Style="background-color:#4E3434; color:white" StartIcon="@Icons.Material.Filled.More" @onclick="() => Actions(context.Id)" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private Rentals[]? rentals;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadRentals();
    }
    private async Task LoadRentals()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Rental/Rentals");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(1000);
            rentals = JsonConvert.DeserializeObject<Rentals[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task Actions(string id)
    {
       
    }

    public async Task AddRental()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };
        var dialog = await Dialog.Show<AddToRentals>("", parameters, options).Result;
    }
}
