
<style>
    .custom-dialog-title {
        background-color: #4E3434;
        color: white;
    }
</style>

<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">Reserve Gown</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 650px; padding: 20px;">
            <MudStepper ShowResetButton>
                <MudStep Title="Gown Details">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12" md="6" class="text-center">
                            <MudImage Src="@($"data:image/bmp;base64,{Convert.ToBase64String(_gowns.Photo)}")" Style="height:200px; width:200px" Class="gown-image" Elevation="25" />
                        </MudItem>
                        <MudItem xs="12" md="6" class="text-center">
                            <br /><br /><br>
                            <MudText Typo="Typo.h6" Align="Align.Justify">Gown Name: <b>@_gowns.Name</b></MudText>
                            <MudText Typo="Typo.h6" Align="Align.Justify">Gown Type: <b>@_gowns.Type</b></MudText>
                            <MudText Typo="Typo.h6" Align="Align.Justify">Gown Color: <b>@_gowns.Color</b></MudText>
                            <MudText Typo="Typo.h6" Align="Align.Justify">Gown Size: <b>@_gowns.Size</b></MudText>
                        </MudItem>
                    </MudGrid>

                </MudStep>
                <MudStep Title="Select Pickup Date" Skippable="false">
                    <MudDatePicker @bind-Date="_date" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudStep>
                <MudStep Title="Payment">
                    <MudText Align="Align.Center">Payment Method</MudText>
                    <MudSelect @bind-Value="@paymentMethod" Placeholder="Gcash" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                        @foreach (var payment in new[] { "Cash", "Gcash", "Paymaya" })
                        {
                            <MudSelectItem Value="@payment" />
                        }
                    </MudSelect> 
                    <br />
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2 font-weight-bold">
                        Please Pay <span style="color: #4E3434;">₱500</span> for Reservation Fee
                    </MudText>
                    <MudText Typo="Typo.body1" Color="Color.Dark" Class="mb-1">
                        GCash: <span class="font-mono">0948 192 4095</span>
                    </MudText>
                    <MudText Typo="Typo.body1" Color="Color.Dark">
                        Maya: <span class="font-mono">0948 192 4095</span>
                    </MudText>
                    <br />
                    @if (paymentMethod != "Cash")
                    {
                        <MudText Align="Align.Center">Upload Receipt</MudText>
                        <MudFileUpload Class="photo" T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.jpeg">
                            <ActivatorContent>
                                <div class="payment-receipt">
                                    <img src="@imgsrc" Style="height:200px; width:200px" />
                                </div>
                            </ActivatorContent>
                        </MudFileUpload>
                    }
                    else
                    {

                    }
                    <MudToolBar>
                        <MudButton Variant="Variant.Filled" FullWidth Style="background-color:#4E3434; color:white" @onclick="Submit">Reserve</MudButton>
                    </MudToolBar>
                    
                </MudStep>
             
            </MudStepper>
        </MudContainer>
    </DialogContent>

</MudDialog>



@code {
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    [Parameter] public Reservation _reservation { get; set; } = new Reservation();
    [Parameter] public Image _image { get; set; } = new();
    public string imgsrc { get; set; } = "";
    private string id;
    [Parameter] public byte[] _filebytes { get; set; } = null!;
    [Parameter] public byte[] _photo { get; set; } = null!;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private DateTime? _date = DateTime.Today;
    private string paymentMethod { get; set; } = "Gcash";
    [CascadingParameter] IMudDialogInstance? mudDialog { get; set; }

    public async Task Id()
    {
        id = await Loc.GetItemAsStringAsync("Id");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Id();
        }
    }

    private async Task Close()
    {
        mudDialog.Close();
    }

    private async Task Submit()
    {
        try
        {
            var reservation = new Reservation
                {
                    Id = Guid.NewGuid().ToString(),
                    GownId = _gowns.Id,
                    UserId = id,
                    Date = DateTime.Now,
                    PickupDate = _date,
                    PaymentMethod = paymentMethod,
                    ReservationFee = 500,
                    Receipt = _photo,
                    Status = "Pending",
                    RentalFee = _gowns.Fee,
                };
            using var httpClient = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await httpClient.PostAsJsonAsync("api/Reservation/AddReservation", reservation);
            var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
            bool isSuccess = response.IsSuccessStatusCode && result > 0;
            SnackBar.Add(
                isSuccess ? "Successfully reserved!" : $"Failed: {response.ReasonPhrase}",
                isSuccess ? Severity.Success : Severity.Warning
            );
            mudDialog.Close();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    protected override void OnInitialized()
    {
        if (_image.img64 != null && _image.img64.Length > 0)
        {
            imgsrc = string.Format($"data:image/png;base64,{_image.img64}");
        }
    }

    private async void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
        _filebytes = memoryStream.ToArray();
        _photo = GetImage(Convert.ToBase64String(_filebytes));
        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(_photo));
        StateHasChanged();
    }

    private async Task clearImg()
    {
        var photos = GetImage(_image.img64);

        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photos));
        StateHasChanged();

    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;

    }
}
