<style>
    .custom-dialog-title {
    background-color: #4E3434;
    color: white;
    }

    .gown-image {
    width: 200px;
    height: 250px;
    border-radius: 10px;
    margin: 10px;
    }

    .payment-container p {
    font-weight: bold;
    margin-bottom: 5px;
    }

    .payment-receipt img {
    width: 200px;
    height: 200px;
    border: 1px solid gray;
    margin-top: 10px;
    border-radius: 5px;
    }
</style>

<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">Reserve Gown</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 650px; padding: 20px;">
            <div class="container mt-4">
                <div class="row">
                    <div class="col-sm-6 text-center">
                        <MudImage Src="@($"data:image/bmp;base64,{Convert.ToBase64String(_gowns.Photo)}")"
                        Class="gown-image"
                        Elevation="25" />
                    </div>
                    <div class="col-sm-6">
                        <MudText Align="Align.Left"><b>Gown Name:</b> @_gowns.Name</MudText>
                        <MudText Align="Align.Left"><b>Gown Type:</b> @_gowns.Type</MudText>
                        <MudText Align="Align.Left"><b>Gown Color:</b> @_gowns.Color</MudText>
                        <MudText Align="Align.Left"><b>Gown Size:</b> @_gowns.Size</MudText>

                    </div>                    
                </div>
            </div>
            <p>Pickup Date</p>
            <MudDatePicker  Label="Pick Up Date" @bind-Date="_date" Variant="Variant.Outlined" Margin="Margin.Normal" />
            <p>Payment Method</p>
            <MudSelect @bind-Value="@_reservation.PaymentMethod" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                @foreach (var payment in new[] { "Cash","Gcash","Paymaya" })
                {
                    <MudSelectItem Value="@payment" />
                }
            </MudSelect>
            @if (_reservation.PaymentMethod == "Cash")
            {

            }
            else
            {
                <p>Payment Receipt</p>
                <MudFileUpload Class="photo" T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.jpeg">
                    <ActivatorContent>
                        <div class="payment-receipt">
                            <img src="@imgsrc" />
                        </div>
                    </ActivatorContent>
                </MudFileUpload>
            }

        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="Submit">Reserve</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    [Parameter] public Reservation _reservation { get; set; } = new Reservation();
    [Parameter] public Image _image { get; set; } = new();
    public string imgsrc { get; set; } = "";
    private string id;
    [Parameter] public byte[] _filebytes { get; set; } = null!;
    [Parameter] public byte[] _photo { get; set; } = null!;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private DateTime? _date = DateTime.Today;

    public async Task Id()
    {
        id = await Loc.GetItemAsStringAsync("Id");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Id();
        }
    }

    private async Task Submit()
    {
        try
        {
            var reservation = new Reservation
                {
                    Id = Guid.NewGuid().ToString(),
                    GownId = _gowns.Id,
                    UserId = id,
                    Date = DateTime.Now,
                    PickupDate = _date,
                    PaymentMethod = _reservation.PaymentMethod,
                    ReservationFee = 500,
                    Receipt = _photo
                };
            using var httpClient = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await httpClient.PostAsJsonAsync("api/Reservation/AddReservation", reservation);
            var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
            bool isSuccess = response.IsSuccessStatusCode && result > 0;
            SnackBar.Add(
                isSuccess ? "Successfully reserved!" : $"Failed: {response.ReasonPhrase}",
                isSuccess ? Severity.Success : Severity.Warning
            );
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    protected override void OnInitialized()
    {
        if (_image.img64 != null && _image.img64.Length > 0)
        {
            imgsrc = string.Format($"data:image/png;base64,{_image.img64}");
        }
    }

    private async void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
        _filebytes = memoryStream.ToArray();
        _photo = GetImage(Convert.ToBase64String(_filebytes));
        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(_photo));
        StateHasChanged();
    }

    private async Task clearImg()
    {
        var photos = GetImage(_image.img64);

        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photos));
        StateHasChanged();

    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;

    }
}
