@page "/"
@rendermode InteractiveServer
<PageTitle>Rental Gowns</PageTitle>


<div class="container mt-5">
    @if (gown == null || gown.Length == 0)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-sm-4">
                <EditForm Model="@_gowns" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudContainer Style="max-height: 600px;">
                        <MudFileUpload Class="photo" T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.jpeg">
                            <ActivatorContent>
                                <img src="@imgsrc" width="200" height="200" style="border: 1px solid gray; margin-top: 10px; border-radius: 5px;" />
                            </ActivatorContent>
                        </MudFileUpload>
                        <br />
                        <MudText Align="Align.Left">Gown Name</MudText>
                        <MudTextField  @bind-Value="@_gowns.Name" Clearable For="@(() => _gowns.Name)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <MudText Align="Align.Left">Gown Type</MudText>
                        <MudSelect @bind-Value="@_gowns.Type" For="@(() => _gowns.Type)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("Bridal")" />
                            <MudSelectItem Value="@("Debut")" />
                            <MudSelectItem Value="@("Filipininia")" />
                            <MudSelectItem Value="@("Prom")" />
                              <MudSelectItem Value="@("Prenup & Photoshoots")" />
                            <MudSelectItem Value="@("Sponsors")" />
                            <MudSelectItem Value="@("Maternity")" />
                        </MudSelect>
                        <MudText Align="Align.Left">Gown Color</MudText>
                        <MudSelect @bind-Value="@_gowns.Color" For="@(() => _gowns.Color)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("Black")" />
                            <MudSelectItem Value="@("Blue")" />
                            <MudSelectItem Value="@("Brown")" />
                            <MudSelectItem Value="@("Cream")" />
                            <MudSelectItem Value="@("Gold")" />
                            <MudSelectItem Value="@("Gray and Silver")" />
                            <MudSelectItem Value="@("Green")" />
                            <MudSelectItem Value="@("Orange")" />
                            <MudSelectItem Value="@("Pink")" />
                            <MudSelectItem Value="@("Nude and Skintone")" />
                            <MudSelectItem Value="@("Red")" />
                            <MudSelectItem Value="@("Teal")" />
                            <MudSelectItem Value="@("Violet and Purple")" />
                            <MudSelectItem Value="@("White")" />
                            <MudSelectItem Value="@("Yellow")" />
                        </MudSelect>
                        <MudText Align="Align.Left">Gown Size</MudText>
                        <MudSelect @bind-Value="@_gowns.Size" For="@(() => _gowns.Size)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("Kids - Size")" />
                            <MudSelectItem Value="@("XS - Size")" />
                            <MudSelectItem Value="@("S - Size")" />
                            <MudSelectItem Value="@("M - Size")" />
                            <MudSelectItem Value="@("L - Size")" />
                            <MudSelectItem Value="@("XL - Size")" />
                            <MudSelectItem Value="@("XXL")" />
                        </MudSelect>
                        <MudText Align="Align.Left">Rental Fee</MudText>
                        <MudTextField @bind-Value="@_gowns.Fee" Clearable For="@(() => _gowns.Fee)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    </MudContainer>
                    <MudToolBar>
                        <MudSpacer />
                        <MudButton FullWidth>Clear</MudButton>
                        <MudButton FullWidth Variant="Variant.Filled" @onclick="Submit" Style="background-color:#4E3434; color:white">Submit</MudButton>
                    </MudToolBar>
                </EditForm>
            </div>

            <div class="col-sm-8">
                <MudToolBar Class="top-row px-4">
                    <MudSpacer />
                    <MudTextField T="string"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  AdornmentColor="Color.Primary"
                                  Placeholder="Search Gowns..."
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudToolBar>

                <MudTable Class="ma-5" Dense Hover Items="@gown" HorizontalScrollbar FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "600px" : "")">
                    <HeaderContent>
                        <MudTh>Photo</MudTh>
                        <MudTh>Gown Name</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Color</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Rental Fee</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><img src="data:image/bmp;base64,@Convert.ToBase64String(context.Photo)" class="photo-img" /></MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Type</MudTd>
                        <MudTd>@context.Color</MudTd>
                        <MudTd>@context.Size</MudTd>
                        <MudTd>@context.Fee</MudTd>
                        <MudTd>
                            <MudFab Style="background-color:#4E3434; color:white" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            </div>
        </div>
    }
</div>

@code {
    private Gowns[]? gown;
    [Parameter] public Gowns _gowns { get; set; } = new Gowns();
    bool fixed_header = true;
    bool fixed_footer = false;
    [Parameter]
    public string img64 { get; set; } = "";
    public string imgsrc { get; set; } = "";
    [Parameter] 
    public byte[] _filebytes { get; set; } = null;
    [Parameter] 
    public byte[] _photo { get; set; } = null;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    private async Task Submit()
    {
        try
        {
            var gown = new Gowns
                {
                    Id = Guid.NewGuid().ToString(),
                    Photo = _photo,
                    Name = _gowns.Name,
                    Type = _gowns.Type,
                    Color = _gowns.Color,
                    Size = _gowns.Size,
                    Fee = _gowns.Fee
                };
            var response = await new HttpClient { BaseAddress = new Uri(Nav.BaseUri) }
                .PostAsJsonAsync("api/Gown/AddGown", gown);
            var result = await response.Content.ReadFromJsonAsync<int?>() ?? 0;
            var isSuccess = response.IsSuccessStatusCode && result > 0;
            SnackBar.Add(
                isSuccess ? "Done: Successfully Saved!" : $"Warning: {response.ReasonPhrase}",
                isSuccess ? Severity.Success : Severity.Warning
            );
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        if (img64 != null && img64.Length > 0)
        {
            imgsrc = string.Format($"data:image/png;base64,{img64}");
        }
    }

    private async void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
        _filebytes = memoryStream.ToArray();
        _photo = GetImage(Convert.ToBase64String(_filebytes));
        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(_photo));
        StateHasChanged();
    }

 
    private async Task clearImg()
    {
        var photos = GetImage(img64);

        imgsrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photos));
        StateHasChanged();

    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
            var response = await client.GetAsync("api/Gown/Gowns");
            if (!response.IsSuccessStatusCode) return;

            await Task.Delay(500);
            gown = JsonConvert.DeserializeObject<Gowns[]>(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    

    public void OnValidSubmit(EditContext context)
    {

    }
}
