@page "/print/{id}"

<style>
    .custom-dialog-title {
        background-color: #4E3434;
        color: white;
    }
</style>

<MudDialog TitleClass="custom-dialog-title" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white; padding-left: 16px;">
            Receipt Preview
        </MudText>
    </TitleContent>

    <DialogContent>


        <MudDivider Class="my-2" />
        <MudText Typo="Typo.subtitle2">Date: @DateTime.Now.ToString("MMMM dd, yyyy")</MudText>
        <MudText Typo="Typo.body2">Name - @_rentals.Fullname</MudText>
        <MudText Typo="Typo.body2">Returned Gown - @_rentals.Name</MudText>
        <MudDivider Class="my-2" />
        <MudText Typo="Typo.body2">Reason for Penalty - Damage</MudText>
        <MudText Typo="Typo.body2">Penalty Amount - ₱@_rentals.Penalty</MudText>
        <MudDivider Class="my-2" />
        @if (_rentals != null)
        {
            <MudText Typo="Typo.h6" Align="Align.Right">
                Total: ₱@(_rentals.Penalty)
            </MudText>
        }
        <MudDivider Class="my-2" />
    </DialogContent>

    <DialogActions>
        <MudButton FullWidth OnClick="@DoPrint" Style="background-color:#4E3434; color:white" Variant="Variant.Filled">Print Now</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [Parameter] public string id { get; set; }
    [Parameter] public Rentals _rentals { get; set; } = new Rentals();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    // An Installed Printer instance
    private InstalledPrinter MyPrinter { get; set; } = new();
    // Use default printer?
    private bool UseDefaultPrinter = true;

    // Printing...
    private void DoPrint()
    {
        if (JSPrintManager.Status == JSPMWSStatus.Open)
        {
            // Create a ClientPrintJob
            var cpj = new ClientPrintJob();

            // Set target printer
            cpj.ClientPrinter = UseDefaultPrinter ? new DefaultPrinter() : MyPrinter;

            // ESC/POS control characters
            char esc = (char)0x1B;
            char newLine = (char)0x0A;

            // Start building printer commands
            var cmds = new StringBuilder();

            cmds.Append(esc + "@"); // Initialize printer
            cmds.Append(esc + "!" + (char)0x18); // Double height + width, bold
            cmds.Append("Vergo Online Wear");
            cmds.Append(newLine);
            cmds.Append(esc + "!" + (char)0x00); // Reset to normal formatting
            cmds.AppendLine(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

            if (_rentals != null)
            {
                cmds.AppendLine($"Name: {_rentals.Fullname}");
                cmds.AppendLine($"Returned Gown: {_rentals.Name}");
                cmds.AppendLine($"Reason for Penalty: Damage");
                cmds.AppendLine($"Penalty Amount: {_rentals.Penalty}");
                cmds.Append(newLine);
                cmds.AppendLine($"Total: {_rentals.Penalty}");
            }
            else
            {
                cmds.AppendLine("Reservation data is not available.");
            }

            cmds.Append(esc + "!" + (char)0x18); // Medium text
            cmds.Append(newLine);

            // Assign the command string
            cpj.PrinterCommands = cmds.ToString();

            // Send the job to the client printer
            JSPrintManager.SendClientPrintJob(cpj);
        }
        MudDialog.Close();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Handle OnGetPrinters event...
            JSPrintManager.OnGetPrinters += () =>
            {
                if (JSPrintManager.Printers != null &&
                    JSPrintManager.Printers.Length > 0)
                {
                    // Display installed printers...
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No printers found...");
                }

            };

            // Handle OnStatusChanged event to detect any WSS status change
            JSPrintManager.OnStatusChanged += () =>
            {
                StateHasChanged();

                // Status = Open means that JSPM Client App is up and running!
                if (JSPrintManager.Status == JSPMWSStatus.Open)
                {
                    //Try getting local printers...
                    JSPrintManager.TryGetPrinters();
                }
            };

            // Start WebSocket comm
            JSPrintManager.Start();
        }

        base.OnAfterRender(firstRender);
    }
}

